.trigger-button {
  width: 60px;
  height: 28px;
  padding: 10px;
  color: #223a5f;
  font-family: 'Bree Serif';
  font-size: 10px;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  border-radius: 4px;
  border-style: none;
  outline: none;
  cursor: pointer;
}

.trigger-button-close {
  background-color: transparent;
  width: 20px;
  height: 20px;
  font-size: 18px;
  border-style: none;
  outline: none;
  align-self: flex-end;
  margin-bottom: 5px;
  cursor: pointer;
}








import {Component} from 'react'

import Popup from 'reactjs-popup'
import {RiCloseLine} from 'react-icons/ri'
import './index.css'

import {
  GamePlayMainContainer,
  GameRulesView,
  PopUpView,
  PopUpImage,
} from './styledComponents'

import GameScore from '../GameScore'
import GameResults from '../GameResults'

const choicesList = [
  {
    id: 'ROCK',
    imageUrl:
      'https://assets.ccbp.in/frontend/react-js/rock-paper-scissor/rock-image.png',
  },
  {
    id: 'SCISSORS',
    imageUrl:
      'https://assets.ccbp.in/frontend/react-js/rock-paper-scissor/scissor-image.png',
  },
  {
    id: 'PAPER',
    imageUrl:
      'https://assets.ccbp.in/frontend/react-js/rock-paper-scissor/paper-image.png',
  },
]

class GamePlay extends Component {
  state = {
    isShow: true,
    text: 'YOU LOSE',
    score: 0,
    newArray: [choicesList[0], choicesList[1]],
  }

  updateResult = (you, opponent) => {
    if (you.id === 'ROCK') {
      switch (opponent.id) {
        case 'PAPER':
          return 'YOU LOSE'
        case 'SCISSORS':
          return 'YOU WON'
        default:
          return 'IT IS DRAW'
      }
    } else if (you.id === 'PAPER') {
      switch (opponent.id) {
        case 'ROCK':
          return 'YOU WON'
        case 'SCISSORS':
          return 'YOU LOSE'
        default:
          return 'IT IS DRAW'
      }
    } else if (you.id === 'PAPER') {
        switch (opponent.id) {
            case 'ROCK':
                return 'YOU WON'
            case 'SCISSORS':
                return 'YOU LOSE'
            default:
                return 'IT IS DRAW'
        }
    } else {
        switch (opponent.id) {
            case 'ROCK':
                return 'YOU WON'
            case 'PAPER':
                return 'YOU LOSE'
            default:
                return 'IT IS DRAW'
        }
    }
  }
  restartGame = () =>this.setState({isShow: true})

  opponentRandomChoice = id => {
      const {score} = this.state
      const opponent = choicesList[Math.floor(Math.random() * choicesList.length)]
      const you = choicesList.filter(eachItem => eachItem.id === id)
      const result = this.updateResult(you[0],opponent)
      let newScore = score
      if (result === 'YOU WON') {
          newScore = score + 1
      } else if (result === 'YOU LOSE') {
          newScore = score - 1
      } else {
          newScore = score
      }
      this.setState({
          score: newScore,
          isShow: false,
          newArray: [you[0], opponent],
          text: result,
      })
  }

  render() {
      const {isShow, text, score, newArray} = this.state
      return (
          <GamePlayMainContainer>
          <GameScore score={score}/>
          <GameResults
              choicesList={choicesList}
              text={text}
              isShow={isShow}
              newArray={newArray}
              opponentRandomChoice={this.opponentRandomChoice}
              restartGame={this.restartGame}
          />
          <GameRulesView>
              <Popup
              modal
              trigger={
                  <button type="button" className="trigger-button">
                      RULES
                  </button>
              }
              >
                  {close => (
                      <PopUpView>
                          <button type="button"
                          className="trigger-button-close"
                          onClick={() => close()}>
                              <RiCloseLine/>
                          </button>
                          <PopUpImage
                              src="https://assets.ccbp.in/frontend/react-js/rock-paper-scissor/rules-image.png"
                              alt="rules"
                          />
                      </PopUpView>
                  )}
              </Popup>
          </GameRulesView>
          </GamePlayMainContainer>      
          )
  }
}



export default GamePlay














import styled from 'styled-components'

export const GamePlayMainContainer = styled.div`
display: flex;
flex-direction: column;
justify-content: flex-start;
align-items: center;
height: 100vh;
width: 100vw;
background-color: #223a5f;
padding: 20px;
`

export const GameRulesView = styled.div`
align-self: flex-end;
margin-top: auto;
@media screen and (max-width: 576px){
    margin-bottom: 40px;
}
`

export const PopUpView = styled.div`
display: flex;
flex-direction: column;
height: 40vw;
justify-content: space-between;
padding: 10px;
@media screen and (max-width: 576px){
    height: 260px;
    width: 100%;
}
`
export const PopUpImage = styled.img`
width:
`
